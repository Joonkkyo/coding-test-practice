#define pii pair<int, int>
#define MAX_N 101

class Solution {
public: 
    const int INF = 9999999;
    vector<pii> graph[MAX_N];
    int dist[MAX_N];

    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        fill_n(dist, MAX_N, INF);
        for (int i = 0; i < flights.size(); ++i) {
            graph[flights[i][0]].push_back({flights[i][1], flights[i][2]});
        }

        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, src, 0});
        while (!pq.empty()) {
            auto temp = pq.top();
            int cost = temp[0];
            int here = temp[1];
            int stop = temp[2];
            pq.pop();

            if (here == dst) return cost;
            if (dist[here] < stop || stop > k) continue;
            dist[here] = stop;
            for (int i = 0; i < graph[here].size(); ++i) {
                int next = graph[here][i].first;
                int newCost = graph[here][i].second + cost;
                pq.push({newCost, next, stop + 1});
            }
        }

        return -1;
    }
};
